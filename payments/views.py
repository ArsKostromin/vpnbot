# payments/views.py
import hashlib
from decimal import Decimal, InvalidOperation
import hmac
import requests
import json
from django.http import JsonResponse, HttpResponseForbidden
from django.views.decorators.csrf import csrf_exempt
from decimal import Decimal
from django.conf import settings
from django.http import HttpResponse
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.views import APIView

from user.models import VPNUser
from payments.models import Payment
from payments.cryptobot import generate_crypto_payment_link
from payments.utils import apply_payment
from payments.services import (
    generate_unique_inv_id,
    generate_robokassa_payment_link,
    verify_robokassa_signature
)
import logging

logger = logging.getLogger(__name__)


@api_view(["POST"])
def create_payment(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Robokassa-–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    telegram_id = request.data.get("telegram_id")
    amount = request.data.get("amount")

    if not telegram_id:
        return Response({"error": "telegram_id is required"}, status=status.HTTP_400_BAD_REQUEST)

    try:
        amount = int(amount)
    except (ValueError, TypeError):
        return Response({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞."}, status=status.HTTP_400_BAD_REQUEST)

    user = VPNUser.objects.get(telegram_id=telegram_id)

    payment = Payment.objects.create(
        user=user,
        inv_id=generate_unique_inv_id(),
        amount=Decimal(amount),
        status=Payment.Status.PENDING,
        currency='–†—É–±–ª–∏'
    )

    payment_link = generate_robokassa_payment_link(payment)
    return Response({"payment_url": payment_link})


@api_view(["GET", "POST"])
def payment_result(request):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –æ—Ç Robokassa –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
    """
    out_sum = request.data.get("OutSum")
    inv_id = request.data.get("InvId")
    received_signature = request.data.get("SignatureValue", "").strip()

    if not out_sum or not inv_id or not received_signature:
        logger.warning(f"[payment_result] –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π: OutSum={out_sum}, InvId={inv_id}, Signature={received_signature}")
        return Response({"error": "Missing required fields."}, status=status.HTTP_400_BAD_REQUEST)

    if not verify_robokassa_signature(out_sum, inv_id, received_signature):
        logger.warning(f"[payment_result] –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è InvId={inv_id}")
        return Response({"error": "Invalid signature."}, status=status.HTTP_400_BAD_REQUEST)

    try:
        payment = Payment.objects.get(inv_id=inv_id)
    except Payment.DoesNotExist:
        logger.error(f"[payment_result] –ü–ª–∞—Ç—ë–∂ —Å InvId={inv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return Response({"error": "Payment not found."}, status=status.HTTP_404_NOT_FOUND)

    if payment.status == Payment.Status.SUCCESS:
        logger.warning(f"[payment_result] –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–ª–±—ç–∫: –ø–ª–∞—Ç—ë–∂ {inv_id} —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return Response(f"OK{inv_id}")

    apply_payment(payment.user, payment.amount)
    payment.status = Payment.Status.SUCCESS
    payment.save()
    logger.warning(f"[payment_result] –ü–ª–∞—Ç—ë–∂ {inv_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    notify_payload = {
        "tg_id": payment.user.telegram_id,
        "amount": float(payment.amount),
        "payment_id": inv_id
    }

    try:
        logger.warning(f"[payment_result] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –±–æ—Ç—É: {notify_payload}")
        response = requests.post(
            "http://vpn_bot:8081/notify", 
            json=notify_payload,
            timeout=3
        )
        response.raise_for_status()
        logger.warning(f"[payment_result] –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {response.status_code} {response.text}")

    except Exception as e:
        logger.error(f"[payment_result] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞: {e}")

    return Response(f"OK{inv_id}")

@api_view(["GET", "POST"])
def success_payment(request):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    return HttpResponse("""
        <html>
            <head>
                <title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
                <style>
                    body { display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; margin: 0; }
                    h1, p { text-align: center; }
                </style>
                <script>
                    window.onload = function() {
                        window.close();
                        setTimeout(() => {
                            window.location.href = 'https://t.me/Anonixvpn_vpnBot'; // fallback
                        }, 1000);
                    }
                </script>
            </head>
            <body>
                <h1>–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</h1>
                <p>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã...</p>
            </body>
        </html>
    """)

@api_view(["GET", "POST"])
def fail_payment(request):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ/–æ—Ç–º–µ–Ω–µ."""
    return HttpResponse("""
        <html>
            <head>
                <title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
                <script>
                    window.onload = function() {
                        window.close();
                        setTimeout(() => {
                            window.location.href = 'https://t.me/Anonixvpn_vpnBot'; // fallback
                        }, 1000);
                    }
                </script>
            </head>
            <body>
                <h1>–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</h1>
                <p>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã...</p>
            </body>
        </html>
    """)

class CreateCryptoPaymentAPIView(APIView):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram CryptoBot.
    """
    def post(self, request):
        telegram_id = request.data.get("telegram_id")
        amount_rub = request.data.get("amount")
        asset = request.data.get("asset", "TON")

        if not amount_rub:
            return Response({"error": "–ü–æ–ª–µ 'amount' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}, status=400)

        try:
            amount_rub = Decimal(amount_rub)
            if amount_rub <= 0:
                raise ValueError
        except (InvalidOperation, ValueError):
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'amount'"}, status=400)

        user = VPNUser.objects.filter(telegram_id=telegram_id).first()
        if not user:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

        payment = Payment.objects.create(
            user=user,
            inv_id=generate_unique_inv_id(),
            amount=amount_rub,
            status=Payment.Status.PENDING,
            currency=asset,
        )

        pay_url = generate_crypto_payment_link(payment, asset, amount_rub)
        return Response({"payment_url": pay_url, "inv_id": payment.inv_id})

import logging
logger = logging.getLogger(__name__)

@csrf_exempt
def crypto_webhook(request):
    logger.warning("üü° –í—ã–∑–æ–≤ /api/crypto/webhook/")
    logger.warning(f"üì® Method: {request.method}")
    logger.warning(f"üì® Headers: {dict(request.headers)}")

    if request.method != "POST":
        logger.warning("üî¥ –ú–µ—Ç–æ–¥ –Ω–µ POST")
        return JsonResponse({"error": "Only POST allowed"}, status=405)

    try:
        raw = request.body.decode("utf-8", errors="replace")
        logger.warning(f"üì¶ Raw body: {raw}")

        data = json.loads(raw)
        logger.warning(f"‚úÖ JSON payload: {data}")

        order_id = data.get("order_id")
        amount = data.get("amount")
        status = data.get("status")
        currency = data.get("currency")

        logger.warning(f"üí∞ –°—Ç–∞—Ç—É—Å: {status}, Order ID: {order_id}, Amount: {amount}, Currency: {currency}")

        if status not in ("paid", "paid_over"):
            logger.warning("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –Ω–µ 'paid', –∏–≥–Ω–æ—Ä–∏–º")
            return JsonResponse({"ok": True})

        # –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id
        try:
            _, telegram_id, *_ = order_id.split("_")
            logger.warning(f"üë§ telegram_id: {telegram_id}")
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å telegram_id: {e}")
            return JsonResponse({"error": "Invalid order_id"}, status=400)

        user = VPNUser.objects.get(telegram_id=int(telegram_id))
        user.balance += Decimal(amount)
        user.save()

        logger.warning(f"üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: {user.balance}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç—É
        notify_payload = {
            "tg_id": user.telegram_id,
            "amount": float(amount),
        }

        try:
            logger.warning(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_payload}")
            response = requests.post(
                "http://vpn_bot:8081/notify",
                json=notify_payload,
                timeout=3
            )
            logger.warning(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response.status_code} {response.text}")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}")

        return JsonResponse({"ok": True})

    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook")
        return JsonResponse({"error": str(e)}, status=500)


class StarPaymentAPIView(APIView):
    """
    –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    def post(self, request):
        user_id = request.data.get("user_id")
        amount = float(request.data.get("amount"))

        user = VPNUser.objects.get(telegram_id=user_id)

        payment = Payment.objects.create(
            user=user,
            inv_id=generate_unique_inv_id(),
            amount=amount,
            status=Payment.Status.SUCCESS,
            currency='Tg stars'
        )

        apply_payment(user, Decimal(amount))

        return Response({
            "message": "OK",
            "amount": amount,
        }, status=status.HTTP_201_CREATED)