import uuid
from datetime import timedelta, datetime
from django.utils import timezone
from rest_framework import status
from vpn_api.models import SubscriptionPlan, Subscription
from .models import Coupon
from vpn_api.utils import create_vless
from vpn_api.services import extend_subscription, get_duration_delta, get_least_loaded_server, get_least_loaded_server_by_country
from uuid import uuid4


DURATION_DELTAS = {
    "5d": timedelta(days=5),
    "1m": timedelta(days=30),
    "3m": timedelta(days=90),
    "6m": timedelta(days=180),
    "1y": timedelta(days=365),
}

def get_duration_delta(duration):
    return DURATION_DELTAS.get(duration)

def apply_coupon_to_user(user, code, request=None):
    try:
        coupon = Coupon.objects.get(code__iexact=code)
    except Coupon.DoesNotExist:
        return {"data": {"detail": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥."}, "status": status.HTTP_404_NOT_FOUND}

    if coupon.is_used:
        return {"data": {"detail": "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."}, "status": status.HTTP_400_BAD_REQUEST}

    if coupon.expiration_date and coupon.expiration_date < timezone.now():
        return {"data": {"detail": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫."}, "status": status.HTTP_400_BAD_REQUEST}

    # üîπ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if coupon.type == "balance":
        if not coupon.discount_amount:
            return {"data": {"detail": "–£ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."}, "status": status.HTTP_400_BAD_REQUEST}

        user.balance += coupon.discount_amount
        user.save(update_fields=["balance"])

        coupon.is_used = True
        coupon.used_by = user
        coupon.save(update_fields=["is_used", "used_by"])

        return {
            "data": {"detail": f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {coupon.discount_amount}$."},
            "status": status.HTTP_200_OK,
        }

    # üîπ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    elif coupon.type == "subscription":
        if not coupon.vpn_type or not coupon.duration:
            return {"data": {"detail": "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: vpn_type –∏–ª–∏ duration –Ω–µ —É–∫–∞–∑–∞–Ω—ã."}, "status": status.HTTP_400_BAD_REQUEST}

        # –ö–æ—Å—Ç—ã–ª—å: –µ—Å–ª–∏ 5d, —Ç–æ –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ–º 1m –∫–∞–∫ duration –≤ –ø–æ–¥–ø–∏—Å–∫—É
        actual_duration = '5d' if coupon.duration == '5d' else coupon.duration
        plan = SubscriptionPlan.objects.filter(
            vpn_type=coupon.vpn_type,
            duration=actual_duration
        ).first()

        delta = get_duration_delta(coupon.duration)
        if not delta:
            return {"data": {"detail": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏."}, "status": status.HTTP_400_BAD_REQUEST}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
        if coupon.vpn_type == "country":
            country = request.data.get("country") if request else None
            if not country:
                return {"data": {"detail": "–î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É."}, "status": status.HTTP_400_BAD_REQUEST}
            server = get_least_loaded_server_by_country(country)
        else:
            server = get_least_loaded_server()

        if not server:
            return {"data": {"detail": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VPN-—Å–µ—Ä–≤–µ—Ä–æ–≤."}, "status": status.HTTP_503_SERVICE_UNAVAILABLE}

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID
        user_uuid = uuid4()

        # –°–æ–∑–¥–∞–Ω–∏–µ VLESS-–∫–æ–Ω—Ñ–∏–≥–∞
        vless_result = create_vless(server, user_uuid)

        if not vless_result.get("success"):
            return {
                "data": {"detail": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VLESS-–∫–æ–Ω—Ñ–∏–≥–∞."},
                "status": status.HTTP_500_INTERNAL_SERVER_ERROR,
            }

        start_date = timezone.now()
        end_date = start_date + delta

        subscription = Subscription.objects.create(
            user=user,
            plan=plan,
            start_date=start_date,
            end_date=end_date,
            vless=vless_result["vless_link"],
            uuid=user_uuid,
            server=server
        )

        coupon.is_used = True
        coupon.used_by = user
        coupon.save(update_fields=["is_used", "used_by"])

        return {
            "data": {
                "detail": f"–ü—Ä–æ–º–æ-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {coupon.duration}.",
                "subscription_id": subscription.id,
                "start_date": subscription.start_date,
                "end_date": subscription.end_date,
                "vless": subscription.vless,
                "uuid": str(subscription.uuid)
            },
            "status": status.HTTP_200_OK,
        }

    return {"data": {"detail": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞."}, "status": status.HTTP_400_BAD_REQUEST}


def generate_coupon_for_user(user):
    code = f"VPN-{uuid.uuid4().hex[:6].upper()}"

    promo = Coupon.objects.create(
        code=code,
        type='subscription',
        expiration_date=datetime.now() + timedelta(days=5),
        vpn_type='serfing',  
        duration='5d',        
        is_used=False
    )

    return promo.code
