from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
from .models import VPNUser
from vpn_api.models import Subscription
from vpn_api.utils import delete_vless, create_vless
import logging

logger = logging.getLogger(__name__)


@receiver(post_save, sender=VPNUser)
def handle_user_ban_status_change(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–∏ –±–∞–Ω–µ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç VLESS.
    –ü—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç VLESS.
    """
    if created:
        return  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        old_instance = VPNUser.objects.get(pk=instance.pk)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞
        if old_instance.is_banned != instance.is_banned:
            if instance.is_banned:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
                handle_user_banned(instance)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω
                handle_user_unbanned(instance)
                
    except VPNUser.DoesNotExist:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {instance.pk}: {e}")


def handle_user_banned(user):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    - –£–¥–∞–ª—è–µ—Ç VLESS –∫–ª—é—á–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.pk} (Telegram ID: {user.telegram_id})")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_subscriptions = user.subscriptions.filter(is_active=True)
    
    for subscription in active_subscriptions:
        try:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription.is_active = False
            subscription.save(update_fields=['is_active'])
            
            # –£–¥–∞–ª—è–µ–º VLESS —Å —Å–µ—Ä–≤–µ—Ä–∞
            if subscription.server and subscription.uuid:
                success = delete_vless(subscription.server, str(subscription.uuid))
                if success:
                    logger.info(f"VLESS —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.pk} (UUID: {subscription.uuid})")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å VLESS –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.pk} (UUID: {subscription.uuid})")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.pk}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_ban_notification(user)


def handle_user_unbanned(user):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∏—Å—Ç–µ–∫
    - –°–æ–∑–¥–∞–µ—Ç VLESS –∫–ª—é—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.pk} (Telegram ID: {user.telegram_id})")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∏—Å—Ç–µ–∫
    from django.utils import timezone
    now = timezone.now()
    
    inactive_subscriptions = user.subscriptions.filter(
        is_active=False,
        end_date__gt=now
    )
    
    restored_count = 0
    
    for subscription in inactive_subscriptions:
        try:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription.is_active = True
            subscription.save(update_fields=['is_active'])
            
            # –°–æ–∑–¥–∞–µ–º VLESS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if subscription.server and subscription.uuid:
                vless_result = create_vless(subscription.server, str(subscription.uuid))
                if vless_result.get("success"):
                    # –û–±–Ω–æ–≤–ª—è–µ–º VLESS —Å—Å—ã–ª–∫—É
                    subscription.vless = vless_result.get("vless_link")
                    subscription.save(update_fields=['vless'])
                    logger.info(f"VLESS –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.pk} (UUID: {subscription.uuid})")
                    restored_count += 1
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VLESS –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.pk} (UUID: {subscription.uuid})")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.pk}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_unban_notification(user, restored_count)


def send_ban_notification(user):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
    """
    if not user.telegram_id:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.pk} –Ω–µ—Ç telegram_id")
        return
    
    try:
        import requests
        
        message = (
            f"üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {user.ban_reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –±–æ—Ç–∞
        response = requests.post(
            "http://vpn_bot:8081/notify",
            json={
                "tg_id": user.telegram_id,
                "message": message,
                "type": "ban_notification"
            },
            timeout=5
        )
        
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {response.status_code} {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")


def send_unban_notification(user, restored_count):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
    """
    if not user.telegram_id:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–∞–Ω–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.pk} –Ω–µ—Ç telegram_id")
        return
    
    try:
        import requests
        
        message = (
            f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫, –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        )
        
        if restored_count > 0:
            message += f"\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {restored_count}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –±–æ—Ç–∞
        response = requests.post(
            "http://vpn_bot:8081/notify",
            json={
                "tg_id": user.telegram_id,
                "message": message,
                "type": "unban_notification"
            },
            timeout=5
        )
        
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–±–∞–Ω–µ: {response.status_code} {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}") 