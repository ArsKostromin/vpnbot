#vpn_api/models
from django.db import models
from django.utils import timezone
from dateutil.relativedelta import relativedelta
from user.models import VPNUser
import uuid
from django.conf import settings
import urllib.parse

class SubscriptionPlan(models.Model):
    VPN_TYPES = [
        ('socials', '–¥–ª—è —Å–æ—Ü.—Å–µ—Ç–µ–π'),
        ('torrents', '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤'),
        ('secure', 'üõ° –î–≤–æ–π–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ'),
        ('country', 'üåê –í—ã–±–æ—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ'),
        ("serfing", '–î–ª—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞')
    ]

    DURATION_CHOICES = [
        ('1m', '1 –º–µ—Å—è—Ü'),
        ('3m', '3 –º–µ—Å—è—Ü–µ–≤'),
        ('6m', '6 –º–µ—Å—è—Ü–µ–≤'),
        ('1y', '1 –≥–æ–¥'),
    ]

    vpn_type = models.CharField(max_length=10, choices=VPN_TYPES, verbose_name='–¢–∏–ø –≤–ø–Ω')
    duration = models.CharField(max_length=2, choices=DURATION_CHOICES, verbose_name='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–¶–µ–Ω–∞')
    discount_active = models.BooleanField(default=False, verbose_name="–°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    discount_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name="–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π")
    discount_text = models.CharField(max_length=255, null=True, blank=True, verbose_name="–¢–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ)")
    
    def get_current_price(self):
        if self.discount_active and self.discount_price:
            return self.discount_price
        return self.price

    def get_display_price(self, with_discount=True):
        if self.discount_active and self.discount_price and with_discount:
            return f"~{self.price}‚ÇΩ~ {self.discount_price}‚ÇΩ"
        return f"{self.price}‚ÇΩ"

    def __str__(self):
        return f"{self.get_vpn_type_display()} ({self.get_duration_display()}) ‚Äì {self.get_display_price()}"

    class Meta:
        verbose_name_plural = '–¢–∞—Ä–∏—Ñ—ã'
        verbose_name = '–¢–∞—Ä–∏—Ñ'

class Subscription(models.Model):
    user = models.ForeignKey(VPNUser, on_delete=models.CASCADE, related_name='subscriptions', verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    plan = models.ForeignKey(SubscriptionPlan, on_delete=models.CASCADE, verbose_name='–ü–ª–∞–Ω')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–∞')
    start_date = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞')
    end_date = models.DateTimeField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
    auto_renew = models.BooleanField(default=True, verbose_name='–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ')
    paused = models.BooleanField(default=False, verbose_name='–ü–∞—É–∑–∞')
    vless = models.TextField(blank=True, null=True, verbose_name='VLESS –∫–æ–Ω—Ñ–∏–≥')
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, verbose_name="UUID", blank=True, null=True,)

    def calculate_end_date(self):
        duration_map = {
            '1m': relativedelta(months=1),
            '3m': relativedelta(months=3),
            '6m': relativedelta(months=6),
            '1y': relativedelta(years=1),
        }
        duration = duration_map.get(self.plan.duration)
        if duration is None:
            raise ValueError(f"Unknown plan duration: {self.plan.duration}")
        return self.start_date + duration


    # @staticmethod
    # def generate_vless_config(user_uuid, domain="server2.anonixvpn.space", port=443, path="/vless", tag="AnonixVPN"):
    #     encoded_path = urllib.parse.quote(path)
    #     return f"vless://{user_uuid}@{domain}:{port}?encryption=none&type=ws&security=tls&path={encoded_path}#{tag}"


    def save(self, *args, **kwargs):
        if not self.end_date:
            self.end_date = self.calculate_end_date()

        if self.end_date and self.end_date < timezone.now():
            self.is_active = False

        # if not self.vless:
        #     user_uuid = str(uuid.uuid4())
        #     self.vless = self.generate_vless_config(
        #         user_uuid=user_uuid,
        #         domain=settings.SERVER_DOMAIN  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º domain, –Ω–µ ip
        #     )
        #     apply_vless_on_server(user_uuid)

        super().save(*args, **kwargs)

    class Meta:
        verbose_name_plural = '–ü–æ–¥–ø–∏—Å–∫–∏'
        verbose_name = '–ü–æ–¥–ø–∏—Å–∫—É'
